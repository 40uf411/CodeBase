from typing import List
from uuid import UUID
from fastapi import APIRouter, Depends, status, HTTPException, Path, Query, Response, Request

from core.auth import require_privileges
core.cache.system import cache_response # Assuming caching might be desired
from services.{{ entity_name | lower }}_service import {{ entity_name | capitalize }}Service, get_{{ entity_name | lower }}_service
from schemas.{{ entity_name | lower }}_schema import {{ entity_name | capitalize }}Response, {{ entity_name | capitalize }}Create, {{ entity_name | capitalize }}Update
from utils.activity_logging_decorators import log_activity # If activity logging is used

router = APIRouter(
    prefix="/{{ entity_name | lower }}s", # Pluralized entity name
    tags=["{{ entity_name | lower }}"],
    dependencies=[require_privileges("{{ entity_name | lower }}:read")] # Basic read privilege
)

@router.get("/", response_model=List[{{ entity_name | capitalize }}Response], summary="List {{ entity_name | capitalize }}s")
@cache_response(ttl=3600) # Example: Cache for 1 hour
async def list_{{ entity_name | lower }}s(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    service: {{ entity_name | capitalize }}Service = Depends(get_{{ entity_name | lower }}_service)
) -> List[{{ entity_name | capitalize }}Response]:
    items = await service.get_all(skip=skip, limit=limit)
    return items

@router.post("/", response_model={{ entity_name | capitalize }}Response, status_code=status.HTTP_201_CREATED,
             dependencies=[require_privileges("{{ entity_name | lower }}:create")],
             summary="Create a new {{ entity_name | capitalize }}")
@log_activity(success_event_type="{{ entity_name | upper }}_CREATE_SUCCESS", failure_event_type="{{ entity_name | upper }}_CREATE_FAILURE")
async def create_{{ entity_name | lower }}(
    item_in: {{ entity_name | capitalize }}Create,
    request: Request, # For log_activity
    service: {{ entity_name | capitalize }}Service = Depends(get_{{ entity_name | lower }}_service)
) -> {{ entity_name | capitalize }}Response:
    # Note: privilege creation (service.create_crud_privileges) should be handled elsewhere or once
    return await service.create(item_in, request=request) # Assuming create method in service

@router.get("/{item_id}", response_model={{ entity_name | capitalize }}Response, summary="Get a {{ entity_name | capitalize }} by ID")
@cache_response(ttl=3600)
async def get_{{ entity_name | lower }}(
    item_id: UUID = Path(..., title="{{ entity_name | capitalize }} ID"),
    service: {{ entity_name | capitalize }}Service = Depends(get_{{ entity_name | lower }}_service)
) -> {{ entity_name | capitalize }}Response:
    item = await service.get_by_id(item_id)
    if not item:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="{{ entity_name | capitalize }} not found")
    return item

@router.put("/{item_id}", response_model={{ entity_name | capitalize }}Response,
             dependencies=[require_privileges("{{ entity_name | lower }}:update")],
             summary="Update a {{ entity_name | capitalize }}")
@log_activity(success_event_type="{{ entity_name | upper }}_UPDATE_SUCCESS", failure_event_type="{{ entity_name | upper }}_UPDATE_FAILURE")
async def update_{{ entity_name | lower }}(
    item_in: {{ entity_name | capitalize }}Update,
    request: Request, # For log_activity
    item_id: UUID = Path(..., title="{{ entity_name | capitalize }} ID"),
    service: {{ entity_name | capitalize }}Service = Depends(get_{{ entity_name | lower }}_service)
) -> {{ entity_name | capitalize }}Response:
    updated_item = await service.update(item_id, item_in, request=request) # Assuming update method
    if not updated_item:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="{{ entity_name | capitalize }} not found for update")
    return updated_item

@router.delete("/{item_id}", response_model={{ entity_name | capitalize }}Response,
               dependencies=[require_privileges("{{ entity_name | lower }}:delete")],
               summary="Delete a {{ entity_name | capitalize }}")
@log_activity(success_event_type="{{ entity_name | upper }}_DELETE_SUCCESS", failure_event_type="{{ entity_name | upper }}_DELETE_FAILURE")
async def delete_{{ entity_name | lower }}(
    request: Request, # For log_activity
    item_id: UUID = Path(..., title="{{ entity_name | capitalize }} ID"),
    hard_delete: bool = Query(False, description="Permanently delete if true"),
    service: {{ entity_name | capitalize }}Service = Depends(get_{{ entity_name | lower }}_service)
) -> {{ entity_name | capitalize }}Response:
    deleted_item = await service.delete(item_id, hard_delete=hard_delete, request=request) # Assuming delete
    if not deleted_item:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="{{ entity_name | capitalize }} not found for deletion")
    return deleted_item
